#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(ql:quickload '(:usocket :prbs) :silent t)
(defpackage :ros.script.sender.3669478566
  (:use :cl :usocket :prbs))
(in-package :ros.script.sender.3669478566)

(defun send-datagram (socket port data)
  (handler-case (sleep 0.3)
    #+sbcl (sb-sys:interactive-interrupt ()
             (sb-ext:exit)))
  (usocket:socket-send socket
                       data
                       (length data)
                       :port port
                       :host "127.0.0.1"))

(defun create-sender (port size degree)
  (let* ((socket (usocket:socket-connect nil nil
                                         :protocol :datagram
                                         :element-type '(unsigned-byte 8)
                                         :local-host "127.0.0.1"
                                         :local-port 2222))
         (gen (byte-gen degree :seed (get-universal-time))))
    (unwind-protect
         (labels ((rec ()
                    (send-datagram socket port (funcall gen size))
                    (rec)))
           (rec))
      (usocket:socket-close socket))))

(defun main (&rest argv)
  (if (eq 2 (length argv))
      (create-sender 2002 (parse-integer (first argv)) (parse-integer (second argv)))
      (mapc #'write-line '("Usage: sender <block size in bytes> <polynomial degree>"
                           ""
                           "Block size is arbitrary, but an individual block needs to have enough data for the receiver to"
                           "lock. There does not seem to be any mathematical formula for determining how much data is needed"
                           "for a given PRBS sequence in order to guarantee lock, but a rule of thumb is to use at least a"
                           "byte for each bit in the sequence (e.g. 23 bytes for a PRBS-23 and so on)."
                           ""
                           "After starting this, go to another window and run the recv script. Ctrl-C when done."))))

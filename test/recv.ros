#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(ql:quickload '(:usocket :prbs :bit-wise) :silent t)

(defpackage :ros.script.recv.3669479074
  (:use :cl :usocket :prbs.err :bit-wise))
(in-package :ros.script.recv.3669479074)

(defun create-server (port degree)
  (let ((socket (usocket:socket-connect nil nil
                                        :protocol :datagram
                                        :element-type '(unsigned-byte 8)
                                        :local-host "127.0.0.1"
                                        :local-port port)))
    (unwind-protect
         ;; receive some bytes to lock with
         (multiple-value-bind (buffer size remh remp) (usocket:socket-receive socket nil 512)
           (declare (ignore remp remh))
           (let ((err (lock (bit-wise:bytes->bits (coerce (subseq buffer 0 size) 'list)) degree)))
             (labels ((rec ()
                           (multiple-value-bind (buff size remh remp) (usocket:socket-receive socket nil 512)
                             (declare (ignore remp remh))
                             (multiple-value-bind (a b) (funcall err (bit-wise:bytes->bits (coerce (subseq buff 0 size) 'list)))
                               (format t "~A ~A~%" a b)))
                           (rec)))
               (rec)))))
      (usocket:socket-close socket)))

(defun main (&rest argv)
  (let ((args argv))
    (create-server 2002 (parse-integer (car args)))))
